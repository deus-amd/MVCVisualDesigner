<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../../Dsl/CustomCode/WidgetList.t4" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MVCVisualDesigner.CodeGenerator.JavaScriptCodeGenerator
{
    public class JavaScriptCodeGeneratorFactoryBase : IJavaScriptCodeGeneratorFactory
    {
        protected Dictionary<WidgetType, IJavaScriptCodeGenerator> m_generators = new Dictionary<WidgetType, IJavaScriptCodeGenerator>() 
        {
<#
    foreach (string widgetName in AllWidgets)
    {
        if (NotGeneratorWidgets.Contains(widgetName)) continue;
#>
            { WidgetType.<#= widgetName.Substring(2) #>, new <#= widgetName #>JavaScriptCodeGenerator() },

<#
    }
#>
        };

        public virtual IJavaScriptCodeGenerator GetCodeGenerator(VDWidget widget)
        {
            if (m_generators.ContainsKey(widget.WidgetType))
            {
                return m_generators[widget.WidgetType];
            }
            throw new NotImplementedException();
        }
    }

    public partial class JavaScriptCodeGeneratorFactory : JavaScriptCodeGeneratorFactoryBase
    {
    }
}


namespace MVCVisualDesigner.CodeGenerator.JavaScriptCodeGenerator
{
<#
    foreach (string widgetName in AllWidgets)
    {
        if (NotGeneratorWidgets.Contains(widgetName)) continue;
#>
    public class <#= widgetName #>JavaScriptCodeGeneratorBase : IJavaScriptCodeGenerator
    {
<#
	    if (!DefaultGenerators.Contains(widgetName))
        {
#>
        protected <#= widgetName #>JavaScriptCodeGeneratorImpl m_impl = new <#= widgetName #>JavaScriptCodeGeneratorImpl();
<#
        }
        else
        {
#>
        protected DefaultJavaScriptCodeGeneratorImpl m_impl = new DefaultJavaScriptCodeGeneratorImpl();
<#
        }
#>

        public <#= widgetName #>JavaScriptCodeGeneratorBase()
        {
        }

        public virtual string GenerateWidgetInitCode(VDWidget eventSource, IJavaScriptCodeGeneratorFactory jsGenFactory)
        {
            return m_impl.GenerateWidgetInitCode(eventSource, jsGenFactory);
        }

         public virtual string GenerateActionCode(VDWidget eventSource, VDWidget eventTarget, VDClientAction action)
         {
            return m_impl.GenerateActionCode(eventSource, eventTarget, action);
         }

         public virtual string GenerateGettingWidgetValueCode(VDWidget widget)
         {
            return m_impl.GenerateGettingWidgetValueCode(widget);
         }
    }

    public partial class <#= widgetName #>JavaScriptCodeGenerator : <#= widgetName #>JavaScriptCodeGeneratorBase
    {
        public <#= widgetName #>JavaScriptCodeGenerator() 
        {
        }
    }


<#
    }
#>
}

namespace MVCVisualDesigner.CodeGenerator.JavaScriptCodeGenerator
{
<#
    foreach (string widgetName in AllWidgets)
    {
        if (NotGeneratorWidgets.Contains(widgetName)) continue;
#>
    public partial class <#= widgetName #>JavaScriptCodeGeneratorImpl : IJavaScriptCodeGenerator
    {
        public <#= widgetName #>JavaScriptCodeGeneratorImpl()
        {
        }

		public string GenerateWidgetInitCode(VDWidget eventSource, IJavaScriptCodeGeneratorFactory jsGenFactory)
        {
			//StringBuilder sbOld = this.GenerationEnvironment;
			//this.GenerationEnvironment = new StringBuilder();
            //generateWidgetInitCodeImpl((<#= widgetName #>)eventSource, jsGenFactory);
			//string code = this.GenerationEnvironment.ToString();
			//this.GenerationEnvironment = sbOld;
			//return code;
			return string.Empty;
        }

        public string GenerateActionCode(VDWidget eventSource, VDWidget eventTarget, VDClientAction action)
        {
			//StringBuilder sbOld = this.GenerationEnvironment;
			//this.GenerationEnvironment = new StringBuilder();
            //generateActionCodeImpl(eventSource, (<#= widgetName #>)eventTarget, action);
			//string code = this.GenerationEnvironment.ToString();
			//this.GenerationEnvironment = sbOld;
			//return code;
			return string.Empty;
        }

        public string GenerateGettingWidgetValueCode(VDWidget widget)
        {
			//StringBuilder sbOld = this.GenerationEnvironment;
			//this.GenerationEnvironment = new StringBuilder();
            //generateGettingWidgetValueCodeImpl((<#= widgetName #>)widget);
			//string code = this.GenerationEnvironment.ToString();
			//this.GenerationEnvironment = sbOld;
			//return code;
			return string.Empty;
        }
    }
<#
    }
#>

    public partial class DefaultJavaScriptCodeGeneratorImpl : IJavaScriptCodeGenerator
    {
        public DefaultJavaScriptCodeGeneratorImpl()
        {
        }

		public string GenerateWidgetInitCode(VDWidget eventSource, IJavaScriptCodeGeneratorFactory jsGenFactory)
        {
			//StringBuilder sbOld = this.GenerationEnvironment;
			//this.GenerationEnvironment = new StringBuilder();
            //generateWidgetInitCodeImpl(eventSource, jsGenFactory);
			//string code = this.GenerationEnvironment.ToString();
			//this.GenerationEnvironment = sbOld;
			//return code;
			return string.Empty;
        }

        public string GenerateActionCode(VDWidget eventSource, VDWidget eventTarget, VDClientAction action)
        {
			//StringBuilder sbOld = this.GenerationEnvironment;
			//this.GenerationEnvironment = new StringBuilder();
            //generateActionCodeImpl(eventSource, eventTarget, action);
			//string code = this.GenerationEnvironment.ToString();
			//this.GenerationEnvironment = sbOld;
			//return code;
			return string.Empty;
        }

        public string GenerateGettingWidgetValueCode(VDWidget widget)
        {
			//StringBuilder sbOld = this.GenerationEnvironment;
			//this.GenerationEnvironment = new StringBuilder();
            //generateGettingWidgetValueCodeImpl(widget);
			//string code = this.GenerationEnvironment.ToString();
			//this.GenerationEnvironment = sbOld;
			//return code;
			return string.Empty;
        }
    }
}

<#@ include file="../ExcludeList.t4" #>